#!/usr/bin/env perl
#
# MIDI utility routines for the Perl MIDI suite.

use 5.24.0;
use warnings;

use Data::Dumper;
use Getopt::Long qw(GetOptionsFromArray);
use MIDI                ();
use Music::LilyPondUtil ();
# TODO
#use Math::Random qw(random_normal);

# for lilypondify
our %durmap = (
    1920 => 1,
    480  => 4,
    240  => 8,
);

package PitchFoo {
    use Moo;
    with('Music::PitchNum::Dutch');
}
my $pitchconv = PitchFoo->new;

my %actions = (
    append           => \&handle_append,
    decompose        => \&handle_decompose,
    dump             => \&handle_dump,
    fuzz             => \&handle_fuzz,
    instrumentate    => \&handle_instrumentate,
    lilypondify      => \&handle_lilypondify,
    merge            => \&handle_merge,
    nixcc            => \&handle_nixcc,
    patch2instrument => \&handle_patch2instrument,
    rechannel        => \&handle_rechannel,
    repatch          => \&handle_repatch,
    stats            => \&handle_stats,
    transpose        => \&handle_transpose,
);

my $action = shift // die "Usage: midiutil <action> <action-args ..>\n";
die "midiutil: no such action: '$action'\n" if !exists $actions{$action};
$actions{$action}->(@ARGV);

sub between {
    my ( $min, $max, $value ) = @_;
    if    ( $value < $min ) { $min }
    elsif ( $value > $max ) { $max }
    else                    { $value }
}

sub change_of {
    my ( $c, $d1, $d2 ) = @_;
    if (    abs($d1) > $c
        and abs($d2) > $c
        and ( ( $d1 > 0 and $d2 < 0 ) or ( $d1 < 0 and $d2 > 0 ) ) ) {
        return 1;
    }
    return 0;
}

# by index so that adjacent events can be poked at
sub each_event {
    my ( $opus, $fn ) = @_;
    my $track_number = 0;
    for my $track ( $opus->tracks_r->@* ) {
        my $events = $track->events_r;
        my $i      = 0;
        while ( $i <= $events->$#* ) {
            if ( $fn->( $events, $i, $track_number ) == -1 ) {
                splice $events->@*, $i, 1;
                next;
            }
            $i++;
        }
        $track_number++;
    }
}

# for when you just need to append some given note to complete out a
# track, but don't want to wait for Logic.app or something to crawl up
# off the disk
sub handle_append {
    GetOptionsFromArray( \@_, 'spec=s' => \my $spec ) or exit 64;
    my $filename = shift // die
      "Usage: midiutil append --spec=track:dtime/chan/note/velo;... midi-file [midi-file-out]\n";
    my $outfile = shift // $filename;

    my %events;
    for my $eventspec ( split /;/, $spec ) {
        my ( $track, $eventstr ) = split /:/, $eventspec;
        $events{$track} = [ split '/', $eventstr ];
    }

    my $opus   = MIDI::Opus->new( { 'from_file' => $filename, } );
    my $tracks = $opus->tracks_r;

    for my $trackno ( 0 .. $#$tracks ) {
        next unless exists $events{$trackno};
        my $mtrk   = $tracks->[$trackno];
        my $events = $mtrk->events_r;
        push @$events,
          [ 'note_on',            0,
            $events{$trackno}[1], $events{$trackno}[2],
            $events{$trackno}[3]
          ],
          [ 'note_off',           $events{$trackno}[0],
            $events{$trackno}[1], $events{$trackno}[2],
            0
          ];
    }

    $opus->write_to_file($outfile);
}

sub handle_decompose {
    my $filename = shift // die "Usage: midiutil decompose midi-file\n";
    my $opus     = MIDI::Opus->new(
        {   'from_file'                => $filename,
            'exclusive_event_callback' => sub {
                # KLUGE this makes some possibly rash assumptions about the
                # contents of the MIDI files...
                if ( $_[0] eq 'note_on' ) {
                    print "note: ", $MIDI::number2note{ $_[3] }, " dtime $_[4]";
                } elsif ( $_[0] eq 'note_off' ) {
                    print " note_off: $_[1]\n";
                } else {
                    print "event: @_\n";
                }
            },
            'include' => \@MIDI::Event::All_events
        }
    );
}

sub handle_dump {
    my $filename = shift // die "Usage: midiutil decompose midi-file\n";
    my $opus     = MIDI::Opus->new( { 'from_file' => $filename, } );
    $opus->dump( { dump_tracks => 1 } );
}

# Mangle a few things in lilypond output - randomize velocity a bit,
# fixup X\sustainOff\sustainOn so there is actually a pedal hop.
sub handle_fuzz {
    my $filename = shift // die "Usage: midiutil fuzz midi-file [midi-file-out]\n";
    my $outfile  = shift // $filename;

    my $opus   = MIDI::Opus->new( { 'from_file' => $filename, } );
    my $tracks = $opus->tracks_r;

    for my $mtrk (@$tracks) {
        my $events = $mtrk->events_r;
        my ( @nix, @volumes );
        for my $i ( 0 .. $#$events ) {
            # { c\< d e\!\> d c\! } are problematical in lilypond as the
            # dynamic change they introduce is huge compared to changes
            # done over many notes, so need a list of note onsets to try
            # to detect and dampen such
            if ( $events->[$i][0] eq 'note_on' and $events->[$i][4] != 0 ) {
                push @volumes, $events->[$i];
            }

            # nix 7,100 control_changes but preserve durations of such
            if (    $events->[$i][0] eq 'control_change'
                and $events->[$i][3] == 7
                and $events->[$i][4] == 100 ) {
                $events->[ $i + 1 ][1] += $events->[$i][1];
                unshift @nix, $i;
            }

            # pedal hops
            if (    $i > 0
                and $events->[$i][0] eq 'control_change'
                and $events->[$i][3] == 64          # sustain pedal
                and $events->[$i][4] > 64           # down
                and $events->[$i][1] == 0           # at zero delta from previous
                and $events->[ $i - 1 ][0] eq 'control_change'
                and $events->[ $i - 1 ][3] == 64    # prev was sustain
                and $events->[ $i - 1 ][4] < 64     # up
                    # TODO this probably should be relative to current
                    # tempo, which lilypond puts into track #0,
                    # elsewhere
                and $events->[ $i - 1 ][1] > 50    # sufficient padding
            ) {
                my $fuzz = int rand() * 5;
                # The gist being to shorten the pedal down and add that
                # time to the pedal up. I can half-pedal with no
                # particular skill in about 140 - 150ms, and would guess
                # that a trained pianist could reach 100ms or below.
                $events->[ $i - 1 ][1] -= 50 - $fuzz;
                $events->[$i][1] += 50 + $fuzz;
            }
        }

        my @deltas = 0;
        for my $i ( 1 .. $#volumes ) {
            $deltas[$i] = $volumes[$i][4] - $volumes[ $i - 1 ][4];
        }
        for my $i ( 1 .. $#volumes ) {
            if ( $i > 0 and change_of( 10, $deltas[$i], $deltas[ $i - 1 ] ) ) {
                my ( $left, $right ) = ( $i, $i );
                for ( my $j = $i - 1; $j >= 0; $j-- ) {
                    if ( abs( $deltas[$j] ) < 10 ) {
                        last;
                    }
                    $left = $j;
                }
                for ( my $k = $i + 1; $k <= $#deltas; $k++ ) {
                    if ( abs( $deltas[$k] ) < 10 ) {
                        last;
                    }
                    $right = $k;
                }
                if ( $left == $right ) {
                    warn Dumper $volumes[$i];
                    warn "zero-width volume jump\n";
                }
                for my $j ( $left .. $right ) {
                    $volumes[$j][4] += int( -1 * $deltas[$j] * 0.5 );
                    $deltas[$j] = 0;
                }
            }
        }

        for my $i ( 0 .. $#volumes ) {
            # fuzz the note volumes; this should most likely not cause
            # any \ff to be louder than a \fff or softer than a \f, etc.
            #$volumes[$i][4] = sprintf "%.f", random_normal( 1, $volumes[$i][4], 0.6 );
            $volumes[$i][4] = sprintf "%.f",
              $volumes[$i][4] - 12 + rand 4 + rand 5 + rand 6 + rand 5 + rand 4;

            # based on lilypond scm/midi.scm, limit volumes to roughly
            # the \ppp <-> \fff range
            $volumes[$i][4] = 115 if $volumes[$i][4] > 115;
            $volumes[$i][4] = 25  if $volumes[$i][4] < 25;
        }

        splice @$events, $_, 1 for @nix;
    }

    $opus->write_to_file($outfile);
}

# generates all variations on standard MIDI instruments, e.g. to review
# what a particular sound font sounds like. this is less expensive than
# templating the lilypond and then...
sub handle_instrumentate {
    my $filename = shift // die "Usage: midiutil instrumentate midi-file\n";

    my $in_opus = MIDI::Opus->new( { 'from_file' => $filename, } );

    # 1..120 is the instruments minus in particular sound effects, edit
    # as necessary to your need
    for my $instrument ( 0 .. 119 ) {
        my $out_opus = $in_opus->copy;
        my $outfile  = "inst$instrument.midi";

        my $tracks = $out_opus->tracks_r;
        while ( my ( $tnum, $track ) = each $tracks->@* ) {
            my $events = $track->events_r;
            my @nix_events;
            for my $ei ( 0 .. $#$events ) {
                # since will be changing the patch, don't then lie about
                # the instrument name, if any
                if ( $events->[$ei][0] eq 'instrument_name' ) {
                    unshift @nix_events, $ei;
                }
                if ( $events->[$ei][0] eq 'patch_change' ) {
                    $events->[$ei][3] = $instrument;
                }
            }

            splice @$events, $_, 1 for @nix_events;

            $tnum-- if $tnum > 0;

            # and, regardless, prefix a patch change, to handle the case
            # of a track without a patch change
            unshift @$events, [ 'patch_change', 0, $tnum, $instrument ];
        }

        $out_opus->write_to_file($outfile);
    }
}

# KLUGE very limited, TODO adjust as needed for midi in question (see
# also midi2ly of lilypond, but I never much liked that)
sub handle_lilypondify {
    my $filename = shift // die "Usage: midiutil lilypondify midi-file\n";
    my $opus     = MIDI::Opus->new( { 'from_file' => $filename, } );

    my @on;

    my $tracks = $opus->tracks_r;
    for my $track (@$tracks) {
        my $events = $track->events_r;
        for my $e (@$events) {
            if ( $e->[0] eq 'note_on' or $e->[1] eq 'note_off' ) {
                if ( $e->[1] > 0 ) {
                    lyemit( \@on, $e->[1] );
                    @on = ();
                }
                push @on, [ $e->[3], $e->[4] ] if $e->[0] eq 'note_on';
            }
        }
        use Data::Dumper;
        warn Dumper \@on;
    }
}

sub lyemit {
    my ( $notes, $dur ) = @_;
    if ( @$notes == 1 ) {
        say "  ", $pitchconv->pitchname( $notes->[0][0] ), $durmap{$dur},
          veloof( $notes->[0][1] );
    } else {
        my %seen;
        say '  <',
          join( ' ',
            map { $seen{ $_->[0] }++ ? () : $pitchconv->pitchname( $_->[0] ) } @$notes ),
          '>', $durmap{$dur}, veloof( $notes->[0][1] );
    }
}

sub veloof {
    my ($n) = @_;
    state $last = '';
    # c\ffff b\fff a\ff g\f f\mf e\mp d\p c\pp b\ppp a\pppp
    # 116    107   101  95  86   77   69  62   53    43
    my $ret;
    if ( $n > 111 ) {
        $ret = "\\ffff";
    } elsif ( $n > 104 ) {
        $ret = "\\fff";
    } elsif ( $n > 98 ) {
        $ret = "\\ff";
    } elsif ( $n > 90 ) {
        $ret = "\\f";
    } elsif ( $n > 81 ) {
        $ret = "\\mf";
    } elsif ( $n > 73 ) {
        $ret = "\\mp";
    } elsif ( $n > 65 ) {
        $ret = "\\p";
    } elsif ( $n > 57 ) {
        $ret = "\\pp";
    } elsif ( $n > 48 ) {
        $ret = "\\ppp";
    } else {
        $ret = "\\pppp";
    }
    if ( $ret eq $last ) {
        $ret = '';
    } else {
        $last = $ret;
    }
    return $ret;
}

sub handle_merge {
    die "too few filenames for merge\n" if @_ < 3;
    my $outfile = pop @_;

    my $opus   = MIDI::Opus->new( { 'from_file' => shift @_ } );
    my $tracks = $opus->tracks_r;

    while (@_) {
        my $subopus = MIDI::Opus->new( { 'from_file' => shift @_ } );
        push @$tracks, @{ $subopus->tracks_r };
    }

    $opus->write_to_file($outfile);
}

# eliminates main volume control_change events. handy if say writing an
# organ work in which case there are likely no volume change or pedal
# effects, and ARIA Player due to the lilypond default volumes is
# blasting away at distortion-inducing levels. hypothetically
sub handle_nixcc {
    my $filename = shift // die "Usage: midiutil nixcc midi-file [midi-file-out]\n";
    my $outfile  = shift // $filename;

    my $opus   = MIDI::Opus->new( { 'from_file' => $filename, } );
    my $tracks = $opus->tracks_r;

    my $trackno = 0;
    my @nixtrack;
    for my $ti ( 0 .. $#$tracks ) {
        my $mtrk   = $tracks->[$ti];
        my $events = $mtrk->events_r;

        # \articulate adds this, or ... ?
        if (    @$events == 1
            and $events->[0][0] eq 'track_name'
            and $events->[0][-1] =~ m/ew:$/ ) {
            warn "nixing track...\n";
            unshift @nixtrack, $ti;
            next;
        }

        my @nix;
        for my $i ( 0 .. $#$events ) {
            # don't need to send these to synth, so don't?
            if (   $events->[$i][0] eq 'track_name'
                or $events->[$i][0] eq 'text_event'
                or $events->[$i][0] eq 'time_signature'
                or $events->[$i][0] eq 'key_signature'
                #       or $events->[$i][0] eq 'patch_change'
            ) {
                unshift @nix, $i;
                next;
            }

            # fuzz note volumes a bit
            # except not for organ-work...
            if ( $events->[$i][0] eq 'note_on' and $events->[$i][4] > 0 ) {
                my $some_percent = $events->[$i][4] * 0.19;
                $events->[$i][4] =
                  $events->[$i][4] + rand() * $some_percent - $some_percent / 2;

                $events->[$i][4] = int( 127 * 0.42 ) if $events->[$i][4] < int( 127 * 0.42 );

                if ( $trackno >= 5 ) {    # KLUGE volume drop on doubled lines
                    $events->[$i][4] -=
                      int( $events->[$i][4] * 0.43 + rand( $events->[$i][4] * 0.41 ) );
                }
                if ( $trackno >= 9 ) {    # KLUGE volume drop on doubled lines
                    $events->[$i][4] -=
                      int( $events->[$i][4] * 0.57 + rand( $events->[$i][4] * 0.17 ) );
                }

                # from scm/midi.scm, limit volumes to \ppp <-> \fff
                $events->[$i][4] = int( 127 * 0.85 ) if $events->[$i][4] > int( 127 * 0.85 );
            }

            # MIDI Controller Numbers - 7 is "Main Volume"
            if ( $events->[$i][0] eq 'control_change' and $events->[$i][3] == 7 ) {
                unshift @nix, $i;
            }
        }

        splice @$events, $_, 1 for @nix;

        #   unshift @$events, [ 'patch_change', 0, 0, 5 ];
        $trackno++;
    }

    splice @$tracks, $_, 1 for @nixtrack;

    $opus->write_to_file($outfile);
}

sub handle_patch2instrument {
    chomp( @ARGV = readline *STDIN )
      if !@ARGV
      or ( @ARGV == 1 and $ARGV[0] eq '-' );
    for my $patchnum (@ARGV) {
        say( ( @ARGV > 1 ? "$patchnum " : '' ),
            Music::LilyPondUtil->patch2instrument($patchnum) );
    }
}

sub handle_rechannel {
    GetOptionsFromArray( \@_, 'spec=s' => \my $spec ) or exit 64;
    my $filename = shift // die
      "Usage: midiutil rechannel --spec=track:chan;t1:c2... midi-file [midi-file-out]\n";
    my $outfile = shift // $filename;

    my %mappings;
    for my $tcspec ( split /;/, $spec ) {
        my ( $track, $chan ) = split /:/, $tcspec;
        $mappings{$track} = $chan;
    }

    my $opus   = MIDI::Opus->new( { 'from_file' => $filename, } );
    my $tracks = $opus->tracks_r;

    for my $trackno ( 0 .. $#$tracks ) {
        next unless exists $mappings{$trackno};
        my $mtrk   = $tracks->[$trackno];
        my $events = $mtrk->events_r;
        for my $i ( 0 .. $#$events ) {
            if (   $events->[$i][0] eq 'note_off'
                or $events->[$i][0] eq 'note_on'
                or $events->[$i][0] eq 'key_after_touch'
                or $events->[$i][0] eq 'control_change'
                or $events->[$i][0] eq 'patch_change'
                or $events->[$i][0] eq 'channel_after_touch'
                or $events->[$i][0] eq 'pitch_wheel_change' ) {
                $events->[$i][2] = $mappings{$trackno};
            }
        }
    }
    $opus->write_to_file($outfile);
}

sub handle_repatch {
    GetOptionsFromArray( \@_, 'patch=i' => \my $patch ) or exit 64;
    my $filename = shift
      // die "Usage: midiutil repatch --patch=N midi-file [midi-file-out]\n";
    $patch //= 0;
    my $outfile = shift // $filename;
    my $opus    = MIDI::Opus->new( { 'from_file' => $filename, } );
    my @tchan;
    each_event(
        $opus,
        sub {
            my ( $events, $i, $tnum ) = @_;
            if ( $events->[$i][0] eq 'patch_change' )    { return -1 }
            if ( $events->[$i][0] eq 'instrument_name' ) { return -1 }
            # save channel used in track for upcoming patch_change
            if ( $events->[$i][0] eq 'note_on' ) { $tchan[$tnum] = $events->[$i][2] }
        }
    );
    my $tnum = 0;
    for my $track ( $opus->tracks ) {
        unshift $track->events_r->@*, [ 'patch_change', 0, $tchan[$tnum], $patch ];
        $tnum++;
    }
    $opus->write_to_file($outfile);
}

sub handle_stats {
    my $filename = shift // die "Usage: midiutil stats midi-file\n";
    my $opus     = MIDI::Opus->new( { 'from_file' => $filename, } );
    $Data::Dumper::Sortkeys = 1;
    my $i = 0;
    for my $track ( $opus->tracks ) {
        my %tmeta;
        for my $e ( $track->events_r->@* ) {
            $tmeta{ $e->[0] }++;
            $tmeta{_events}++;
            $tmeta{_dur} += $e->[1];
        }
        print Data::Dumper->Dump( [ \%tmeta ], [ 'track' . $i++ ] );
    }
}

sub handle_transpose {
    GetOptionsFromArray(
        \@_,
        'transpose|T=i' => \my $trans,
        'velocity|V=i'  => \my $velo
    ) or exit 64;
    my $filename = shift
      // die "Usage: midiutil transpose [-T t] [-V v] midi-file [out-midi]\n";
    my $outfile = shift // $filename;
    $trans = defined $trans ? int $trans : 0;
    $velo  = defined $velo  ? int $velo  : 0;
    MIDI::Opus->new(
        {   'from_file'      => $filename,
            'event_callback' => sub {
                if ( $_[0] =~ m/^note_o(?:n|ff)$/ ) {
                    $_[3] = between( 0, 127, $_[3] + $trans );
                    $_[4] = between( 0, 127, $_[4] + $velo );
                }
            },
            'include' => \@MIDI::Event::All_events
        }
    )->write_to_file($outfile);
}
