#!/usr/bin/env perl
#
# ilog - get URL(s) from the irssi logs, or some file, e.g.
#
#   # view what is probably a screencapture of someone having used a
#   # mininuke to clear some bugs off a road (or similar hilarity)
#   $ feh `ilog -c cdda`
#
#   # custom filename input requires that the regex be specified
#   $ perldoc URL::Search | ilog -a \^ -
#
#   # one of these is broken in w3m. no idea why. (the topic was the
#   # mininuke someone had dropped on freenode)
#   $ ilog -a php
#   https://netsplit.de/networks/top10.php
#   https://netsplit.de/networks/top10.php.php

use 5.28.0;
use warnings;
use File::Spec::Functions qw(catfile);
use Getopt::Long qw(GetOptions);
use POSIX qw(mktime strftime);
use URL::Search qw($URL_SEARCH_RE);

my $Flag_Channel  = '#perl';
my $Flag_Encoding = ':encoding(UTF-8)';

Getopt::Long::Configure('bundling');
GetOptions(
    'all|a'       => \my $Flag_Showall,
    'channel|c=s' => \$Flag_Channel,
    'encoding|e'  => \$Flag_Encoding,
    'help|h|?'    => \&emit_help,
) or exit 65;

my $search_re = shift // qr/^/;
my $file      = shift;
my $fh;
if ( defined $file ) {
    if ( $file eq '-' ) {
        $fh = \*STDIN;
    } else {
        open $fh, '<', $file or die "could not open '$file': $!\n";
    }
} else {
    $fh = most_recent_logfile();
}

binmode $fh,     $Flag_Encoding;
binmode *STDOUT, $Flag_Encoding;

# TODO there is File::ReadBackwards (or something like that) but I
# forgot to install that module while I was online. might be more
# efficient for showing only the last URL in a big file
my $last;
while ( my $line = readline $fh ) {
    while ( $line =~ m/($URL_SEARCH_RE)/g ) {
        my $url = $1;
        if ( $url =~ m/$search_re/ ) {
            if ($Flag_Showall) {
                say $url;
            } else {
                $last = $url;
            }
        }
    }
}
say $last if defined $last;

sub emit_help {
    warn <<"END_USAGE";
Usage: ilog [options] [url-select-regex] [input-file]

Options include:

    -a        Show all (matching) URL (default select regex: qr/^/)
    -c chan   Search specified channel (default: perl)
    -e enc    Specify input (and output) encoding to use (default: UTF-8)

END_USAGE
    exit 64;
}

sub most_recent_logfile {
    my $Dir_Path = "$ENV{HOME}/var/log/irc/libera";

    my %Channel_Map = (
        brogue       => '##brogue',
        cdda         => '#cataclysmdda',
        roguelikedev => '##roguelikedev',
        rld          => '##roguelikedev',
    );

    # TODO this may need adjustment if I ever get on a &channel, or need
    # to frequently pull a URL out of a private chat session, but that
    # has come up almost never in over 26 years of using IRC)
    my $file;
    if ( exists $Channel_Map{$Flag_Channel} ) {
        $file = $Channel_Map{$Flag_Channel};
    } elsif ( $Flag_Channel =~ m/^#/ ) {
        $file = $Flag_Channel;
    } else {
        $file = '#' . $Flag_Channel;
    }
    $file .= '.log';

    my $fh;
    my $logfile;
    for my $month ( recent_months('%Y-%m') ) {
        $logfile = catfile( $Dir_Path, $month, $file );
        open( $fh, '<', $logfile ) or next;
        return $fh;
    }
    die "ilog: could not open '$logfile': $!\n";
}

# only this or the previous month, given the ~3day retention on IRC logs
sub recent_months {
    my ($tmpl) = @_;
    my @values;
    my @time = localtime();
    push @values, strftime( $tmpl, @time );
    $time[4]--;    # previous month, perldoc -f localtime
    push @values, strftime( $tmpl, localtime( mktime(@time) ) );
    return @values;
}
